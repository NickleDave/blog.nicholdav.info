[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Hoping machine",
    "section": "",
    "text": "Today I Avoided: Self-hosting the streaming music app Navidrome\n\n\n\n\n\n\nmusic\n\n\nsoftware\n\n\n\nHow I avoided babysitting my own Navidrome server\n\n\n\n\n\nJan 7, 2025\n\n\nDavid Nicholson\n\n\n\n\n\n\n\n\n\n\n\n\nMy Bandcamp wrapped 2024\n\n\n\n\n\n\nmusic\n\n\n\nMusic I bought on Bandcamp in 2024\n\n\n\n\n\nJan 5, 2025\n\n\nDavid Nicholson\n\n\n\n\n\n\n\n\n\n\n\n\nDomain-driven software design is a good idea, still\n\n\n\n\n\n\ndomain-driven design\n\n\ncomputer science\n\n\nresearch software engineering\n\n\n\nDomain-driven design might be just data abstraction with doodles, but you should care about it anyways\n\n\n\n\n\nJan 2, 2025\n\n\nDavid Nicholson\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/2025-01-05-bandcamp-wrapped-2024/index.html",
    "href": "posts/2025-01-05-bandcamp-wrapped-2024/index.html",
    "title": "My Bandcamp wrapped 2024",
    "section": "",
    "text": "Every December, Spotify rewards us for submitting to the algorithm by telling us what we listened to all year, as you know if you are not a boomer. Geriatric millenials know it, even infantile Xennials like me know it. This lets us wave a badge of pride on social media: ‚ÄúYes, I am in the top 1% of Gwar fans.‚Äù (‚ÄúTop 0.001% of Melt Banana fans‚Äù? Whatever, insert a reference to a relatively niche band that you haven‚Äôt thought about in a while so it strikes you as funny.)\nI barely Spotify. My Wrapped was ‚ÄúYou listened to\nIn this post I‚Äôm sharing music I bought on Bandcamp in 2024.\nFirst, some prelude, for context.\nI am a huge music fan. I also am painfully aware that the tech industry I work in has really changed how musicians make money. It used to be that record companies could support a relatively broad base of musicians, as long as those musicians helped them sell enough sounds etched into highly processed dinosaur bones (records). Now we have replaced that system with a new system where tech overlords support a much narrower base of musicians, basically by accident, since they pay only thousandths of a penny every time a song gets streamed. I think somebody wrote a pretty good song about it once.\n(You can‚Äôt read the rest of this blog post until you sit through the whole song. My blog, my rules üòé)\nOk, the angry tech bros of the broligarchy are telling themselves I‚Äôm just virtue-signaling with this opening paragraph. Of course the right fix for this is to not actually change the system, but instead to make each person feel like they alone are personally responsible for fixing everything. And that is why, whenever I can, I pay for music for Bandcamp. Individualism! Exceptionalism! Americanism! My strategy worked perfectly fine until Bandcamp was acquired by Epic Games, and then by Songtradr, who layed off half the staff. So much for ‚Äúchampioning independent artists‚Äù. So much for personally fixing everything.\nThe last thing I‚Äôll say about this before I actually write about music is that I have seen a couple of attempts to build worker-owned platforms. In principle, I am totally in favor of this. We do not need these fucking scumbags, and the sooner we realize it the better. In practice, there‚Äôs some complicated economics thing that goes on when you have multiple teams running on a shoelace that are all trying to replace the thing run by our feudal techlords who have infinite money to fend them off. Someone who is smarter than me made this great website that captures the alternatives: https://bandcampalternative.com/\nMy good friend Alex Chabot LeClerc also happens to be really into music, and posts about it weekly on his blog: https://alexchabot.net/categories/music/ He shares Spotify links, and that works great (I will begrudgingly admit that there are good things about tech), but he also knows that I live on Bandcamp,\nAnd that‚Äôs also why he shared this cool blog post with me from Mac Wright, on how to generate a Bandcamp wrapped. https://macwright.com/2024/12/06/bandcamp-wrapped.html\nThe actual tool is here: https://tmcw-bandcampwrapped.web.val.run/\nI did as the tool instructs, copying and pasting my purchases over the last year. Instead of just dumping everything, I will write a little bit about the music I‚Äôve been into over the last year, and how I found it. I hope you will forgive me this bit of self-reflection."
  },
  {
    "objectID": "posts/2025-01-05-bandcamp-wrapped-2024/index.html#french-canadians",
    "href": "posts/2025-01-05-bandcamp-wrapped-2024/index.html#french-canadians",
    "title": "My Bandcamp wrapped 2024",
    "section": "French Canadians",
    "text": "French Canadians\nSince Alex inspired this post, I will start with music I bought from Canada this year.\n\n\nTop Minou by Bleu Jeans Bleu\n\n\n\nL‚Äôappartement by ludovic alarie\n\n\n√Ä demain peut-√™tre by Galaxie\n\n\nAqualudes by Am√©lie Fortin"
  },
  {
    "objectID": "posts/2025-01-05-bandcamp-wrapped-2024/index.html#spacemusic-ambient-electronica",
    "href": "posts/2025-01-05-bandcamp-wrapped-2024/index.html#spacemusic-ambient-electronica",
    "title": "My Bandcamp wrapped 2024",
    "section": "spacemusic, ambient, electronica",
    "text": "spacemusic, ambient, electronica\nI have been into ambient for a while. Like a lot of people, I was unwittingly turned on to Japanese ambient during the pandemic, thanks to the YouTube algorithm. See this article on ars technica: https://arstechnica.com/gaming/2020/11/how-old-ambient-japanese-music-became-a-smash-hit-on-youtube/ (I like a lot of the related music namechecked in this article that was also mysteriously promoted by the YouTube algorithm, like 1979 from Deru, Plant Music, and An Empty Bliss Beyond this World by the Caretaker) That made me get back into Brian Eno more deeply and then just sort of embrace ambient more generally, even though the failed musician in me can feel the ghost of Frank Zappa silently seething at wallpaper music. Man, I get it, you were a super-genius composer, but people are allowed to like wallpaper. Looking back over this year, The Algorithm has continued to turn me on to a lot of other ambient, but more into the genre of spacemusic. Somehow this fits with me continuing to dwell in the post-apocalpytic, since I played a lot of Caves of Qud this year and I re-read the first book of the Southern Reach Trilogy.\n\nspacemusic\n\nUK\n\n\nNACHT MUSIK by Steve Brenner\n\n\nDARK HOUR Brenner/Gulch by STEVE BRENNER\n\n\nS I G N A L S by STEVE BRENNER\n\n\nTwelve Dimensional World by Tim Stebbing\n\n\nOrbiter by Tim Stebbing\n\n\nBoth Steve Brenner and Tim Stebbing I think are UK artists who got their start in the ~70s. I found them through YouTube channels like Sounds of the Dawn, here and here. Brenner has directly sent me an email every time I‚Äôve purchased from him. This is the kind of personal touch you don‚Äôt get when you stream music through a Platform.\n\n\nAmerican Primitive\nOk, there‚Äôs only one group in this category, the Nightcrawlers, but I love them, and I wish I could pay them more for all of their music.\n\n\nThe Biophonic Boombox Recordings by The Nightcrawlers\n\n\nI found them through this channel\nbut as that person kindly pointed out there‚Äôs actually another channel with a whole playlist.\n\n\nWhat I really love about their albums are the art, clearly made on some 80s graphic design software like Printshop, but somehow managing to look mystical at the same time. (Scroll through the playlist to see.) Mysticisim in the same way that I think Robert Pollard‚Äôs lyrics about UFOs and his collage album covers are, at their best, mystical.\n\n\n\n\n\nModular?\nI will lump together Young Scientist and Sines of Modular Pleasure into a totally-made up genre I‚Äôll call ‚Äú80s american ambient‚Äù. There‚Äôs no over themes of space per se. Of course I have to like a group named Young Scientist. I‚Äôm no longer so young but they really have made scientist soundtrack music, for those late hours in the lab.\n\n\nOver Low Trees‚Ä¶ by Young Scientist\n\n\nResults, Not Answers by Young Scientist\n\n\n\n\nAlaska by Sines of Exquisite Pleasure\n\n\nStudies in Luminescence by Sines of Exquisite Pleasure\n\n\nModular Systems by Sines of Exquisite Pleasure\n\n\nMusic for Hospitals by Sines of Exquisite Pleasure\n\n\nThere‚Äôs some question of whether Sines of Modular Pleasure are even real. Check out this maniac‚Äôs blog post: https://ivandsm.github.io/2022/12/04/on-sines-of-exquisite-pleasure.html (Maniac in a good way, thank you for your work, whoever you are/) Based on their latest release, I think they are indeed more of an homage. It still works for me, and I would still lump it into this category of ‚ÄúAmerican suburban guys who wanted to be Brian Eno but had to re-invent the genre‚Äù\n\nCube of the Unknowing\nYet another YouTube find.\nAgain, as a scientist who would like to resist all the worst aspects of reductionism, how am I not going to like an album called Ghost Circuits of Menlo Park?\n\n\nGhost Circuits Menlo by The Cube of Unknowing\n\n\nBog Phosphors by The Cube Of Unknowing"
  },
  {
    "objectID": "posts/2025-01-05-bandcamp-wrapped-2024/index.html#electronica",
    "href": "posts/2025-01-05-bandcamp-wrapped-2024/index.html#electronica",
    "title": "My Bandcamp wrapped 2024",
    "section": "Electronica",
    "text": "Electronica\n\nHotel Pools\nHotel Pools is another artist I found during the pandemic. This was my running music, when I would do my routes through Rock Creek Park in DC. It‚Äôs perfect for that. Just total shut-off-worry-noise-thoughts music.\n\n\nFiLo by Hotel Pools\n\n\n\n\nHome\nYet another group I found through YouTube, this time as the first song on this random playlist that features a mecha-Bart Simpson as the image with a trippy bad VR background.\n\n\nYou‚Äôre telling me that you do not feel goosebumps all over your body, as if a your soul became a laser beam shooting out of God‚Äôs forehead, at the very momenet you hear that song, with the mecha Bart and the cyberpunk background undulating behind? You, sir, have no soul.\nTurns out all their other shit is really good too.\n\n\nFalling Into Place by HOME\n\n\nResting State by HOME\n\n\nBefore The Night by HOME\n\n\n\n\nAn Unexpected Giant Leap by Christopher Haddow\n\n\n\n\nd√©j√† vu, sonder by Hehehehe\n\n\n\n\nForce Majeure by Dezron Douglas & Brandee Younger\n\n\n\n\nIl Corpo by Piero Umiliani\n\n\nPianoFender Blues by Piero Umiliani\n\n\n\n\nHey Panda by High Llamas\n\n\n\n\nDay by Nils Frahm\n\n\n\n\nGeist by Shannon Lay"
  },
  {
    "objectID": "posts/2025-01-05-bandcamp-wrapped-2024/index.html#other",
    "href": "posts/2025-01-05-bandcamp-wrapped-2024/index.html#other",
    "title": "My Bandcamp wrapped 2024",
    "section": "Other",
    "text": "Other\n\nGabor Szabo\n\n\nDreams by Gabor Szabo\n\n\n\n\nAroo Jaftab\nI heard this artist open for Khruangbin went I went with my partner to see them at Anthem DC. I love the microtonal melodies that she sings, that remind me of some Iranian music. She is also just clearly a true artist and poet. Thank God, we need more such people in the world.\n\n\nBird Under Water by arooj aftab"
  },
  {
    "objectID": "posts/2025-01-07-setting-up-navidrome/index.html",
    "href": "posts/2025-01-07-setting-up-navidrome/index.html",
    "title": "Today I Avoided: Self-hosting the streaming music app Navidrome",
    "section": "",
    "text": "Inspired by many tech folks who blog about ‚ÄúToday I Learned‚Äù, I am going to blog about how ‚ÄúToday I Avoided‚Äù doing some work that would probably teach me some things about what it takes to actually run our present day world, but that would also be painfully boring.\nThis is related to my last post about Bandcamp Wrapped ‚Äì one thing I don‚Äôt get from Bandcamp is the pretty nice Spotify user interface, developed over the eons by the faceless army of software engineers and UI/UX experts to give us access to our music, and subtly influence us to buy things from ads via some dark patterns. I would really like to be able to play my music that I payed for through my own app, so I don‚Äôt have to have my entire life mediated by some feudal tech overlord.\nEnter: Navidrome, ‚ÄúYour Personal Streaming Service‚Äù. As the tag-line implies, it lets you stream your own music. Ok, cool. But anyone who is not a techie will be faced with a daunting wall of docs telling them they‚Äôre going to need to set up Docker containers and host their own instance of Navidrome, possibly even using something called Docker Compose :shocked:. And if this person is not totally intimadated they will then watch YouTube videos created by someone near my end of the neurospectrum that will likely totally lose them in a swamp of detail about YAML config files.\nHappily I was able to avoid watching any of these videos. Here‚Äôs my secret three step process\n\nCreate a managed instance of Navidrome on Pikapods\n\nLink to docs\n\nTag my music with Musicbrainz Picard\n\ndo I need a folder structure? No link to Navidrome FAQ re tags http://www.thedreaming.org/2020/11/22/musicbrainz-picard/\n\nCopy my tagged music with Rclone\n\nIt was as easy as following the install instructions and then doing this https://rclone.org/sftp/"
  },
  {
    "objectID": "posts/2025-01-02-domain-driven-design/index.html",
    "href": "posts/2025-01-02-domain-driven-design/index.html",
    "title": "Domain-driven software design is a good idea, still",
    "section": "",
    "text": "This post falls in the category of ‚Äúme writing about how my thinking has evolved about research and software‚Äù. If you are a researcher that writes software, then you might get something out of it. Especially if you‚Äôre not familiar with the idea of domain-driven design. What I hope to convince you of is that, sure, domain-driven design is just as obvious an idea as it sounds, but you should still be thinking about it. I‚Äôll get there by saying a little about one book I‚Äôve been reading recently, Structure and Interpretation of Computer Programs.\nBut first, let me introduce domain-driven design, and tell you why you might care about it. Sometime in 2022-2023, I read Domain-Driven Design by Eric Evans, and I got really excited about it. (You can get it from bookshop.org here, and if you‚Äôre feeling dangerous you can probably find a PDF of it on a random GitHub repository.) I ended up reading it because I had been reading Architecture Patterns with Python, and they mentioned it in the introduction. Full disclosure: I have not finished either of these books. In fact, I haven‚Äôt finished a lot of books, but that‚Äôs maybe the undiagnosed ADHD talking. I did spend a lot of time with the first few chapters of both, though. If you do nothing else, read the first chapter of Evans‚Äô book, where he relates the story of how he worked with some electrical engineers to design software they would use to design printed circuit boards (AKA PCBs). If you have ever gone through the process of designing software for some real-world domain, I bet it will really resonate with you. Or, you know what? I‚Äôll dare to say that, even if you have only ever written nerdy software tools for the domain of other software nerds, you still might find that the story resonates with you. It‚Äôs an interesting story for a couple of reasons. First of all, you have a feeling that he is almost an anthropologist, going into this unfamiliar tribe of electrical engineers so he can learn their culture. I think this is a familiar feeling for anyone who has tried to translate some real-world domain into software, even if it‚Äôs part of a culture they feel like they belong to. Second, you really get a feel for his process. At the beginning, he makes mistakes. He tries to understand their jargon word-for-word. Then he asks them to specify in detail what they think the software should do. Neither of those approaches were ever going to work well. Finally he hits upon the idea of asking them to draw out diagrams of their process and how the software should interact with it. These are simple, rough box and arrow sketches as he shows.\n\n\n\nevans figure 1.2\n\n\nI happened to read this at the same time that I had been sketching out some initial ideas for the VocalPy library that I develop. You can see some of these sketches here: https://github.com/vocalpy/vocalpy/issues/19\n\n\n\nschematic of library named vocles from linked github issue\n\n\nIf you were to click through to the library‚Äôs docs, you might notice that these bear little resemblance to VocalPy now. I think this is actually a good thing ‚Äì more on that below. (You might also notice at the time I was thinking of calling it vocles ü§¶ ‚Äì this is a very tortured pun, everyone please clap for me showing enough restraint for once in my life to not deploy a tortured pun.)\nI don‚Äôt actually remember which came first: these sketches, or me reading the book. I think that I actually drew the sketches first, and had them sitting around on a desk forever, until finally it hit me that I should add them to the repo to document my design process. And then reading this part of Evans‚Äô book really made me think that drawings like this should be integral to the design process. Part of what I want to say here is that, you should be doing this, if you‚Äôre not already, and what‚Äôs more, you should be including it in your docs for your software. And this goes for all software, unless you are literally writing such a boring cookiecutter CRUD app that a so-called Large Language Model can regurgitate it perfectly for you after being ‚Äútrained‚Äù on the actual work of human beings.\nAt this point, you might be thinking, ‚Äúwrite code in terms of your domain, yeah, sure, everybody does that‚Äù. Like I said, I got really excited reading this stuff and told people about it at the job I had at the time. I made a big deal of presenting parts of the book, and talking about how we could use this approach for what we were working on. And I got this very underwhelmed response of ‚ÄúYeah, we sort of already do that. Aren‚Äôt you just describing object-oriented programming?‚Äù Yes, but no! I‚Äôll come back to the ‚Äúno, we aren‚Äôt doing that below‚Äù, but first, the yes. We should realize this is what we‚Äôre already doing and be very explicit about it! The domain should be at the front of our mind at all times, and we only should be iterating on the design of our software insofar as it relates to the domain!\nHere I‚Äôll say what I said in that work meeting when I got that underwhelmed response. Even though we all sort of subconsciously think of the domain when we design our code, Evans advocates for a specific development process, that he says is required for his approach to design to work. The important part here is that he sees his process as a form of extreme or Agile programming. If you don‚Äôt know what those are, what you need to know is that they are more iterative then previous approaches based on ‚Äúelaborate development methodologies that burden projects with useless, static documents and obsessive upfront planning and design‚Äù, as he puts it. Instead, Evans focuses on writing code that has a bare bones implementation he can test right away. ‚ÄúDevelopment is iterative.‚Äù Of course, this is one place where Python, my main programming language, shines. It‚Äôs really easy to iterate interactively in a Jupyter notebook with a bare-bones implementation of your sketch of an API. Of course, later you should do some proper engineering instead of living in Jupyter notebooks, so you don‚Äôt have to worry about someone giving a preachy lecture in the form of a conference talk that condemns you for your naughty programming practices. His other requirement for the development process is that ‚Äú[d]evelopers and domain experts have a close relationship.‚Äù If you are a researcher who programs, well, hopefully you already have a close relationship with yourself. And with your collaborators and colleagues. This second requirement naturally gives rise to one of the key ideas from the book, that of ubiquitous language, that ‚Äúembeds domain terminology in the software systems we build‚Äù, as Martin Fowler puts it in this post. The ubiquitous language consists of the key concepts in the domain that the software needs to capture, the things that developers and domain-experts realize they should focus on as they go throug the iterative process of development.\nIn spite of the underwhelmed response, I continued to really like the idea of domain-driven development. Even if I haven‚Äôt gone back to finish the book and immerse myself in every detail, the core idea has really stuck with me. So much so that you can see that I cited the book in a Proceedings paper where I first introduced VocalPy, and where I included similar schematics.\n\n\n\nfigure 1 from VocalPy proceedings paper\n\n\nAs I mentioned above, even by the time I got to this first Proceeding paper, the design of the library had evolved. But this is a good thing ‚Äì I did exactly what Evans prescribed, and continued to iterate on the design of the package. Doing so made me realized which parts were actually useful, that I wanted to retain in the core. I think sketching things out has also helped me understand why the things I ended up taking out are still useful, just not in the way I had thought at first. The library at first was very focused on the idea of capturing a dataset of specific file types, and then being able to save this dataset in the form of a SQLite file. You can see where I was really focused on treating the dataset as if it were part of an app, like in the architecture book. I do think this is still important, but it is not the core of what the library does ‚Äì I realized later that the core data types needed to be things like sounds, spectrograms, annotations, the things that a researcher studying animal communication and using bioacoustics would be talking about. So, basically, I did the anthropological exercise, as in Chapter 1 of Evans‚Äô book, but instead of doing it with other people, I started by doing it with the part of my brain that claims to know things about acoustic communication. (I have since engaged with other people who actually know these things and can give me good feedback.)\nI also came back to the idea of domain-driven development in a talk I gave about VocalPy where I talked a little bit about how it maybe clashes with some recommendations for programming in scientific Python.\n\n\nThis is where I come back to the ‚Äúno‚Äù part of ‚ÄúDo we already do this? Yes and no.‚Äù In the discussion at the end of the talk, I said just what I‚Äôve said here, that a lot of people react as if, ‚Äúso, yeah, we already do that‚Äù. If that‚Äôs so, then show me the doodles! Show me your mental model of your domain ‚Äî put it in your docs! Let me read it, let me actually see these schematics, even if they are just doodles, it helps me to know how your thought process evolved. All I can see right now is this insurmountable mountain of code, and I don‚Äôt even know where the path starts so I can scale it! I know that there are examples of people doing this, e.g., in the scientific Python community, but I think it‚Äôs fair to say that this is not the norm. I don‚Äôt know that I have ever seen diagrams showing how the design evolved, but I can‚Äôt help but feel like that‚Äôs exactly the sort of thing that could help people get up to speed on how the code works.\nOk, so now the moral of the story at the end. This is where I tell you that, actually, you are quite justified if you are feeling like domain-driven design is old news, but even then you should still be thinking about it. I now know for sure that these ideas have been around longer than Eric Evans‚Äô book, because I have been attempting to read yet another book, the aforementioned Structure and Interpretation of Computer Programs (namely the Javascript edition, if you care). I ended up reading this book because I have begun working my way through the reading list on &lt;teachyourselfcs.com&gt;. That is another topic that could be a blog post unto itself, but suffice to say that it is a source of some shame that I ostensibly make my living by programming computers,\nbut I only have the vaguest idea of how computers work, or how programming works, and so I have this need to fix that. I have also realized that, of course, computer scientists also think in terms of models of computers, that is, their domain, and this is why it‚Äôs easier to learn about computers by learning their models. This is why it‚Äôs helpful to learn git by actually learning how git works, and this is why I think it has actually been worth reading SICP, because it gives me two or three different mental models of how computer programs work.\nAnd so this is how I ended up finding domain-driven design in SICP, and having to admit to myself that, yeah, this idea has been around forever. Lo and behold, when I got to chapters 2 and 3, there I saw that we were talking about data abstraction and designing programs for modeling. Sound familiar? Let me quote you this bit from chapter 3:\n\nOne powerful design strategy, which is particularly appropriate to the construction of programs for modeling physical systems, is to base the structure of our programs on the structure of the system being modeled. For each object in the system, we construct a corresponding computational object. For each system action, we define a symbolic operation in our computational model. Our hope in using this strategy is that extending the model to accommodate new objects or new actions will require no strategic changes to the program, only the addition of the new symbolic analogs of those objects or actions. If we have been successful in our system organization, then to add a new feature or debug an old one we will have to work on only a localized part of the system.\n\nWell there it is, domain-driven design in a nutshell. And if so great and venerable a source as SICP deigns to talk about it, if these supposedly very smart people think it‚Äôs worth discussing in the introductory sections of their book chapters, then it must be an idea worth thinking about. QED."
  }
]